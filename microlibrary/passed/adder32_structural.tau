# 32-Bit Ripple-Carry Adder (Structural Specification)
#
# This specification defines a 32-bit adder by composing two 16-bit adders (`adder16_s`).
# This demonstrates hierarchical composition and scalability.
#
# Its logical equivalence to the behavioral (word-level) specification will be formally
# proven in `proofs/prove_adder32_equivalence.tau`.
#
# Inputs:
#   a31..a0: 32-bit input vector A
#   b31..b0: 32-bit input vector B
#   cin:     1-bit carry-in
#
# Outputs:
#   s31..s0:  32-bit sum vector S
#   cout:     1-bit final carry-out

# c16 is the intermediate carry bit connecting the two 16-bit adders.
adder32_s(a31,a30,a29,a28,a27,a26,a25,a24,a23,a22,a21,a20,a19,a18,a17,a16,a15,a14,a13,a12,a11,a10,a9,a8,a7,a6,a5,a4,a3,a2,a1,a0, b31,b30,b29,b28,b27,b26,b25,b24,b23,b22,b21,b20,b19,b18,b17,b16,b15,b14,b13,b12,b11,b10,b9,b8,b7,b6,b5,b4,b3,b2,b1,b0, cin, s31,s30,s29,s28,s27,s26,s25,s24,s23,s22,s21,s20,s19,s18,s17,s16,s15,s14,s13,s12,s11,s10,s9,s8,s7,s6,s5,s4,s3,s2,s1,s0, cout) := ex c16 (
    adder16_s(a15,a14,a13,a12,a11,a10,a9,a8,a7,a6,a5,a4,a3,a2,a1,a0, b15,b14,b13,b12,b11,b10,b9,b8,b7,b6,b5,b4,b3,b2,b1,b0, cin, s15,s14,s13,s12,s11,s10,s9,s8,s7,s6,s5,s4,s3,s2,s1,s0, c16) &
    adder16_s(a31,a30,a29,a28,a27,a26,a25,a24,a23,a22,a21,a20,a19,a18,a17,a16, b31,b30,b29,b28,b27,b26,b25,b24,b23,b22,b21,b20,b19,b18,b17,b16, c16, s31,s30,s29,s28,s27,s26,s25,s24,s23,s22,s21,s20,s19,s18,s17,s16, cout)
)
